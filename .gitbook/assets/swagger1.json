{
    "openapi": "3.0.1",
    "info": {
        "title": "Your API",
        "version": "v1"
    },
    "paths": {
        "/AdminSetting/GetInsightsReportConfig": {
            "get": {
                "tags": [
                    "AdminSetting"
                ],
                "summary": "Fetches the configuration details for the Insights Report from the database.",
                "responses": {
                    "200": {
                        "description": "Success: The Insights Report configuration fetched successfully."
                    },
                    "404": {
                        "description": "Not Found: No data found in the database for the Insights Report configuration."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while fetching the Insights Report configuration."
                    }
                }
            }
        },
        "/AdminSetting/UpdateInsightsReportConfig": {
            "put": {
                "tags": [
                    "AdminSetting"
                ],
                "summary": "Inserts or updates the configuration details for the Insights Report in the database.",
                "requestBody": {
                    "description": "The InsightsReportConfig object containing the configuration data to be inserted or updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InsightsReportConfig"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InsightsReportConfig"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/InsightsReportConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success: The configuration data was successfully inserted or updated in the database."
                    },
                    "400": {
                        "description": "Bad Request: The lists in the configuration must have the same number of elements."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while inserting or updating the configuration data."
                    }
                }
            }
        },
        "/AdminSetting/GetCapacityReportConfig": {
            "get": {
                "tags": [
                    "AdminSetting"
                ],
                "summary": "Fetches the configuration details for the Capacity Report from the database.",
                "responses": {
                    "200": {
                        "description": "Success: The Capacity Report configuration fetched successfully."
                    },
                    "404": {
                        "description": "Not Found: No data found in the database for the Capacity Report configuration."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while fetching the Capacity Report configuration."
                    }
                }
            }
        },
        "/AdminSetting/UpdateCapacityReportConfig": {
            "put": {
                "tags": [
                    "AdminSetting"
                ],
                "summary": "Inserts or updates the configuration details for the Capacity Report in the database.",
                "requestBody": {
                    "description": "The configuration data for the Capacity Report to be inserted or updated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CapacityReportConfig"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CapacityReportConfig"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CapacityReportConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success: The Capacity Report configuration was successfully inserted or updated."
                    },
                    "400": {
                        "description": "Bad Request: The lists in the configuration must have the same number of elements."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while inserting or updating the Capacity Report configuration."
                    }
                }
            }
        },
        "/AppOwnsInfo/InsertAppOwnsAccessToken": {
            "post": {
                "tags": [
                    "AppOwnsInfo"
                ],
                "summary": "Inserts an App-Owns-Access token for authentication purposes, enabling secure access to resources.",
                "responses": {
                    "200": {
                        "description": "Success: The App-Owns-Access token has been successfully inserted."
                    },
                    "400": {
                        "description": "Bad Request: The request failed."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while inserting the access token."
                    }
                }
            }
        },
        "/AzureKeyVault/GetSecret": {
            "get": {
                "tags": [
                    "AzureKeyVault"
                ],
                "summary": "Retrieves a secret from Azure Key Vault and returns it in an encrypted format.",
                "parameters": [
                    {
                        "name": "secretName",
                        "in": "query",
                        "description": "The name of the secret to be retrieved from Key Vault.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Returns the encrypted secret."
                    },
                    "400": {
                        "description": "Bad Request: If an error occurs while retrieving the secret."
                    }
                }
            }
        },
        "/Collections/CreateCollection": {
            "post": {
                "tags": [
                    "Collections"
                ],
                "summary": "Creates a new Collection",
                "requestBody": {
                    "description": "The CollectionModel object containing details about the collection to be created, including collection name, workspaces, reports, pages, user actions, roles, and collaborators.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionModel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success: The collection was successfully created."
                    },
                    "400": {
                        "description": "Bad Request: Error in creating collection."
                    },
                    "500": {
                        "description": "Internal Server Error: An unexpected error occurred while creating the collection."
                    }
                }
            }
        },
        "/Collections/UpdateCollection": {
            "put": {
                "tags": [
                    "Collections"
                ],
                "summary": "Updates an existing collection. If the collection already exists, it will first delete the old collection and its collaborators, \r\nand then create a new collection with the provided details.",
                "requestBody": {
                    "description": "The CollectionModel object containing details about the collection to be created, including collection name, workspaces, reports, pages, user actions, roles, and collaborators.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionModel"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionModel"
                            }
                        },
                        "application/*+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionModel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success: The collection was successfully updated."
                    },
                    "400": {
                        "description": "Bad Request: The input model is invalid or missing required data."
                    },
                    "500": {
                        "description": "Internal Server Error: An unexpected error occurred while updating the collection."
                    }
                }
            }
        },
        "/Collections/DeleteCollection": {
            "delete": {
                "tags": [
                    "Collections"
                ],
                "summary": "Deletes a collection and its associated collaborators from the database.",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "query",
                        "description": "The ID of the collection to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collection and its collaborators were successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request: The provided collection ID is invalid."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while attempting to delete the collection or collaborators."
                    }
                }
            }
        },
        "/Collections/GetCollectionById": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Retrieves a collection and its associated collaborators by the given collection ID.",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "query",
                        "description": "The ID of the collection to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collection and its collaborators were successfully retrieved."
                    },
                    "400": {
                        "description": "Bad Request: The provided collection ID is invalid."
                    },
                    "404": {
                        "description": "Not Found: No collection was found with the provided collection ID."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while retrieving the collection or collaborators."
                    }
                }
            }
        },
        "/Collections/GetCollections": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "API endpoint to retrieve collections and their associated collaborators for a given email ID.\r\nCaches the result for efficient retrieval.",
                "parameters": [
                    {
                        "name": "emailId",
                        "in": "query",
                        "description": "The email ID of the user whose collections and collaborators are being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number for paginated results (default is 1).",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSizeCollection",
                        "in": "query",
                        "description": "The number of collections per page (default is 10).",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collections and collaborators were successfully retrieved, either from cache or fresh data."
                    },
                    "400": {
                        "description": "Bad Request: The provided email ID is invalid."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while retrieving the collections or collaborators."
                    }
                }
            }
        },
        "/Collections/GetCollectionNames": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Retrieves collections for a given email ID.",
                "parameters": [
                    {
                        "name": "emailId",
                        "in": "query",
                        "description": "The email ID of the user whose collections are being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collections were successfully retrieved."
                    },
                    "400": {
                        "description": "Bad Request: The provided email ID is invalid or missing."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while retrieving the collections."
                    }
                }
            }
        },
        "/Collections/UpdateFavouriteCollection": {
            "put": {
                "tags": [
                    "Collections"
                ],
                "summary": "Updates the 'favourite' status of a collection for a specific user. It also invalidates the cached collections data for the user after a successful update.",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "query",
                        "description": "The ID of the collection to be updated.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "isFavourite",
                        "in": "query",
                        "description": "A boolean value indicating whether the collection is marked as a favourite.",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "usermail",
                        "in": "query",
                        "description": "The email ID of the user whose collection is being updated.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collection was successfully updated and the cache was invalidated."
                    },
                    "400": {
                        "description": "Bad Request: The provided data is invalid or missing."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while updating the collection or invalidating the cache."
                    }
                }
            }
        },
        "/Collections/GetCollectionsOptimized": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Retrieves a list of collections grouped by CollectionId and RowlevelCollectionId, including collection and collaborator details.",
                "parameters": [
                    {
                        "name": "emailId",
                        "in": "query",
                        "description": "The email ID associated with the collections to be retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Returns the optimized collections grouped by CollectionId and RowlevelCollectionId."
                    },
                    "400": {
                        "description": "Bad Request: The provided emailId is invalid or missing."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while processing the collections request."
                    }
                }
            }
        },
        "/Collections/UpdateCollectionName": {
            "put": {
                "tags": [
                    "Collections"
                ],
                "summary": "Updates the name of a collection based on the provided collection ID.",
                "parameters": [
                    {
                        "name": "collectionName",
                        "in": "query",
                        "description": "The new name to be assigned to the collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collectionId",
                        "in": "query",
                        "description": "The ID of the collection to be updated.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collection name was successfully updated."
                    },
                    "400": {
                        "description": "Bad Request: The provided collection name or ID is invalid or missing."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while updating the collection name."
                    }
                }
            }
        },
        "/Collections/GetCollectionsLazy": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Retrieves collections and their associated collaborators for a given email ID with lazy loading support.\r\nCaches the result for efficient retrieval.",
                "parameters": [
                    {
                        "name": "emailId",
                        "in": "query",
                        "description": "The email ID of the user whose collections and collaborators are being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Tab",
                        "in": "query",
                        "description": "The tab identifier for filtering collections.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number for paginated results (default is 1).",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "fav",
                        "in": "query",
                        "description": "Indicates whether to filter by favorite collections (default is false).",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "pageSizeCollection",
                        "in": "query",
                        "description": "The number of collections per page (default is 10).",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collections and collaborators were successfully retrieved, either from cache or fresh data."
                    },
                    "400": {
                        "description": "Bad Request: The provided email ID or Tab value is invalid."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while retrieving the collections or collaborators."
                    }
                }
            }
        },
        "/Collections/NewTestClick": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Retrieves collections and their associated collaborators for a given email ID. Caches the result for efficient retrieval.",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collections and collaborators were successfully retrieved, either from cache or fresh data."
                    },
                    "400": {
                        "description": "Bad Request: The provided email ID is invalid."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while retrieving the collections or collaborators."
                    }
                }
            }
        },
        "/Collections/CollectionCollaborator": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Retrieves collections and their associated collaborators for a given email ID. Caches the result for efficient retrieval.",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: The collections and collaborators were successfully retrieved, either from cache or fresh data."
                    },
                    "400": {
                        "description": "Bad Request: The provided email ID is invalid."
                    },
                    "500": {
                        "description": "Internal Server Error: An error occurred while retrieving the collections or collaborators."
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CapacityReportConfig": {
                "required": [
                    "datasetId",
                    "datasetName",
                    "pageId",
                    "reportId",
                    "workspaceId",
                    "workspaceName"
                ],
                "type": "object",
                "properties": {
                    "workspaceId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaceName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "datasetId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "datasetName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "reportId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pageId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            },
            "CollectionModel": {
                "required": [
                    "collaboratorAccess",
                    "collaboratorEmail",
                    "collectionName",
                    "createdBy",
                    "createdDate",
                    "isRLS",
                    "pageId",
                    "pageName",
                    "reportId",
                    "reportName",
                    "userActionsFlag",
                    "workspaceId",
                    "workspaceName"
                ],
                "type": "object",
                "properties": {
                    "collectionId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "collectionName": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "isFavourite": {
                        "type": "boolean"
                    },
                    "rowLevelCollectionId": {
                        "type": "string",
                        "nullable": true
                    },
                    "workspaceId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaceName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "reportId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "reportName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pageId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdBy": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "pageName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdDate": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "lastUpdatedDate": {
                        "type": "string",
                        "nullable": true
                    },
                    "userActionsFlag": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        }
                    },
                    "userActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "isRLS": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        }
                    },
                    "datasetId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "roleName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "roleValue": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "collaboratorEmail": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "collaboratorAccess": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            },
            "InsightsReportConfig": {
                "required": [
                    "datasetId",
                    "datasetName",
                    "pageId",
                    "reportId",
                    "workspaceId",
                    "workspaceName"
                ],
                "type": "object",
                "properties": {
                    "workspaceId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaceName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "datasetId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "datasetName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "reportId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pageId": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            },
            "KuberenetesInactivity": {
                "required": [
                    "inactivitynewValue",
                    "inactivityState"
                ],
                "type": "object",
                "properties": {
                    "inactivitynewValue": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "inactivityState": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "KubernetesExploration": {
                "required": [
                    "groupId",
                    "id",
                    "reportId",
                    "token",
                    "userLoad"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "reportId": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "groupId": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "token": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "userLoad": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "additionalProperties": false
            },
            "TestRunExecutionModel": {
                "required": [
                    "executedBy",
                    "isExecuted",
                    "rowLevelCollectionId",
                    "testRunId"
                ],
                "type": "object",
                "properties": {
                    "testRunId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rowLevelCollectionId": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "executedBy": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "isExecuted": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "executedAt": {
                        "type": "string",
                        "nullable": true
                    },
                    "loadTestingCount": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "nullable": true
                    },
                    "statusMessage": {
                        "type": "string",
                        "nullable": true
                    },
                    "executionType": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "TestRunModel": {
                "required": [
                    "collectionId",
                    "createdBy",
                    "createdDate",
                    "description",
                    "loadTestingCount",
                    "rowLevelCollectionId",
                    "testRunName",
                    "testRunType",
                    "totalTestingLoadCount"
                ],
                "type": "object",
                "properties": {
                    "collectionId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "rowLevelCollectionId": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "testRunName": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "testRunType": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "loadTestingCount": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "status": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "createdBy": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdDate": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "lastUpdatedDate": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastExecutedDate": {
                        "type": "string",
                        "nullable": true
                    },
                    "enableVisuals": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        },
                        "nullable": true
                    },
                    "totalTestingLoadCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "additionalProperties": false
            },
            "UpdateAccessTokenModel": {
                "required": [
                    "accessToken",
                    "userEmail"
                ],
                "type": "object",
                "properties": {
                    "accessToken": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "userEmail": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "UserInfoModel": {
                "required": [
                    "userEmail",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "userName": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "userEmail": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "additionalProperties": false
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "apiKey",
                "description": "Enter 'Bearer' followed by your JWT token",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "Bearer": []
        }
    ]
}